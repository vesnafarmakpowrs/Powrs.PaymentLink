<?xml version="1.0" encoding="utf-8"?>
<ServiceConfiguration xmlns="http://waher.se/Schema/ServiceConfiguration.xsd">
	<StartupScript>
             <![CDATA[
			  Global.["RegexValidation"] := (RegexValidation(input, validationType, countryCode) := 
			  (
				logObject := "";
				logActor := "";
				logEventID := "RegexValidation.config";

			    isValid := false;
                try 
                (
					countryCode := countryCode ?? "RS";
					
				    if(validationType = "OrgName") then
					(
						isValid := input like "^[\\p{L}][\\p{L}\\s.\&,?]*[\\p{L}?]{2,100}$";
					)
				    else if(validationType = "OrgNumber") then
					(
						isValid := input like "\\d{8,10}$";
					)
				    else if(validationType = "OrgTaxNumber") then
					(
						isValid := input like "\\d{9}$" or input like "\\d{12}$";
					)
					else if(validationType = "OrgDepartment") then
					(
						isValid := input like "^[\\p{L}][\\p{L}\\s,?]*[\\p{L}?]{1,100}$";
					)					
					else if(validationType = "OrgRole") then
					(
						isValid := input like "^[\\p{L}][\\p{L}\\s,?]*[\\p{L}?]{2,50}$";
					)
					else if(validationType = "OrgActivity") then
					(
						isValid := input like "^[\\p{L}\\s]{1,100}$";
					)
					else if(validationType = "OrgActivityNumber") then
					(
						isValid := input like "\\d{4,5}$";
					)
					
					
					else if(validationType = "BankNumber") then
					(
						isValid := input like "^(?!.*--)[\\d-]{1,25}$";
					)
					
					
					else if(validationType = "PersonFirstLastName") then
					(
						isValid := input like "[\\p{L}\\s]{2,30}";
					)
					else if(validationType = "PersonalNumber") then
					(
						NormalizedPersonalNumber:= Waher.Service.IoTBroker.Legal.Identity.PersonalNumberSchemes.Normalize(countryCode, input);
						isPersonalNumberValid:= Waher.Service.IoTBroker.Legal.Identity.PersonalNumberSchemes.IsValid(countryCode,NormalizedPersonalNumber);
						
						isValid := input like "^\\d{13}$" and isPersonalNumberValid;
					)
					
					
					else if(validationType = "CountryCode") then
					(
						isValid := input like "[A-Z]{2}";
					)
					else if(validationType = "Country") then
					(
						isValid := input like "[\\p{L}\\s]{2,50}$";
					)
					else if(validationType = "City") then
					(
						isValid := input like "[\\p{L}\\s]{2,50}$";
					)
					else if(validationType = "Address") then
					(
						isValid := input like "^[\\p{L}\\p{N}\\s]{3,100}$";
					);
					
                )
                catch 
                (
					Log.Error(Exception.Message, logObject, logActor, logEventID, null);
                    isValid := false;
                );

                isValid;
			  ););
              ]]>
	</StartupScript>
</ServiceConfiguration>
