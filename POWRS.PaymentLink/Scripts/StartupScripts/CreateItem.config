<?xml version="1.0" encoding="utf-8"?>
<ServiceConfiguration xmlns="http://waher.se/Schema/ServiceConfiguration.xsd">
	<StartupScript>
		<![CDATA[
			Global.["CreateItem"]:= (CreateItem(ValidatedUser, RemoteId,  
			                                    Title, Price, Currency, 
												Description, PaymentDeadline, 
			                                    BuyerFirstName, BuyerLastName, BuyerEmail, BuyerPhoneNumber,
												BuyerAddress , BuyerCity , BuyerCountryCode, 
												CallBackUrl, 
												WebPageUrl, 
												LogActor)):= 
			(
			   try
				(				 
                    logEventID := "CreateItem.config";		
					logObject := ValidatedUser.username;
                    Log.Debug("Create Item config Called " + Title, logObject, logActor, logEventID, null);	
					
					Password:= select top 1 Password from BrokerAccounts where UserName = ValidatedUser.username;
					
					errors:= Create(System.Collections.Generic.List, System.String);
					
					if(System.String.IsNullOrWhiteSpace(Password)) then 
					(
					 Log.Debug("Password is not valid: " + Password, logObject, logActor, logEventID, null);
					 errors.Add("Password");
				    );				
                    
                    if(RemoteId not like "^[\\p{L}\\s0-9-\/#-._]{1,10}$") then 
                    (
                       Log.Debug("RemoteId not valid: " + RemoteId, logObject, logActor, logEventID, null);
					   errors.Add("RemoteId");
					);	
                    if(Title not like "[\\p{L}\\s0-9.,;:!?()'\"\\/#_~+*@$%^& -]{2,30}") then
					(
						Log.Debug("Title not valid: " + Title, logObject, logActor, logEventID, null);
						errors.Add("Title");
					);
					if(Currency not like "[A-Z]{3}") then 
					(
						Log.Debug("Currency not valid: " + Currency, logObject, logActor, logEventID, null);
						errors.Add("Currency");
					);
					if(Description not like "[\\p{L}\\s0-9.,;:!?()'\"\\/#_~+*@$%^& -]{5,100}") then
					(
						Log.Debug("Description not valid: " + Description, logObject, logActor, logEventID, null);
						errors.Add("Description");
					);
					if(PaymentDeadline not like "^(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])\\/\\d{4}$") then 
					(
						Log.Debug("PaymentDeadline not valid: " + PaymentDeadline, logObject, logActor, logEventID, null);
						errors.Add("PaymentDeadline");
					);
					if(BuyerFirstName not like "[\\p{L}\\s\/,.&_-]{2,35}") then 
					(
						Log.Debug("buyerFirstName not valid: " + BuyerFirstName, logObject, logActor, logEventID, null);
						errors.Add("BuyerFirstName");
					);

					if(BuyerLastName not like "[\\p{L}\\s\/,.&_-]{2,35}") then
					(
						Log.Debug("buyerLastName not valid: " + BuyerLastName, logObject, logActor, logEventID, null);
						errors.Add("BuyerLastName");
					);
					if(BuyerEmail not like "[\\p{L}\\d._%+-]+@[\\p{L}\\d.-]+\\.[\\p{L}]{2,50}") then 
					(
						Log.Debug("BuyerEmail not valid: " + BuyerEmail, logObject, logActor, logEventID, null);
						errors.Add("BuyerEmail");
					);
					if(BuyerPhoneNumber != null and PBuyerPhoneNumber not like "^[+]?[0-9]{6,15}$") then 
					(
						Log.Debug("buyerPhoneNumber not valid: " + BuyerPhoneNumber, logObject, logActor, logEventID, null);
						errors.Add("BuyerPhoneNumber");
					);
					if(BuyerAddress not like "^[\\p{L}\\p{N}\\s,./#-]{3,100}$") then 
					( 
						Log.Debug("buyerAddress not valid: " + BuyerAddress, logObject, logActor, logEventID, null);
						errors.Add("BuyerAddress");
					);
					 
					if (!exists(BuyerCity)) then BuyerCity := "";

					if (BuyerCity not like "[\\p{L}\\s\/,.&_-]{0,50}$") then 
					(
						Log.Debug("buyerCity not valid: " + BuyerCity, logObject, logActor, logEventID, null);
						errors.Add("BuyerCity");
					);

					if(PBuyerCountryCode not like "[A-Z]{2}") then 
					(
						Log.Debug("BuyerCountry not valid: " + BuyerCountryCode, logObject, logActor, logEventID, null);
						errors.Add("BuyerCountry");
					);				

                    dateTemplate:= "dd/MM/yyyy HH:mm:ss";
					PaymentDeadline += " 23:59:59";
					ParsedDeadlineDate:= System.DateTime.ParseExact(PaymentDeadline, dateTemplate, System.Globalization.CultureInfo.CurrentUICulture).ToUniversalTime();
					if(ParsedDeadlineDate < NowUtc) then 
					(
						Log.Debug("Deadline must be in the future.");
						errors.Add("PaymentDeadline");
					);
					
					if(errors.Count > 0)then
					(
					   Error(errors);
					);

					KeyId := GetSetting(ValidatedUser.username + ".KeyId","");
					KeyPassword:= GetSetting(ValidatedUser.username + ".KeySecret","");
										
					if(System.String.IsNullOrEmpty(KeyId) or System.String.IsNullOrEmpty(KeyPassword)) then 
					(
						Error("No signing keys or password available for user: " + ValidatedUser.username );
					);

					TemplateId:= GetSetting("POWRS.PaymentLink.TemplateId","");

					if(System.String.IsNullOrWhiteSpace(TemplateId)) then 
					(
						Error("Not configured correctly");
					);
					
					ContractParameters:= select top 1 Parameters from Contracts where ContractId = TemplateId;
					if(ContractParameters == null) then 
					(
					 Error("Parameters for the contract does not exists.");
					);

					EscrowFee:= 0;
					foreach Parameter in ContractParameters do 
					(
					  Parameter.Name like "EscrowFee" ?   EscrowFee := Parameter.ObjectValue;
					);

                    Identity := select top 1 * from IoTBroker.Legal.Identity.LegalIdentity where Account = ValidatedUser.username And State = 'Approved';
					AgentName := Identity.FIRST + " " + Identity.MIDDLE + " " + Identity.LAST;
					   
					if (System.String.IsNullOrEmpty(Identity.ORGBANKNUM)) then
					Error("Legal identity for this " + ValidatedUser.username + " mising bank account number");
										
					Contract:=CreateContract(ValidatedUser.username, TemplateId, "Public",
					{
						"RemoteId": RemoteId,
						"Title": Title,
						"Description": Description,
						"Value": Price,
						"PaymentDeadline" : ParsedDeadlineDate,
						"Currency": Currency,
						"Country": BuyerCountryCode,
						"Expires": TodayUtc.AddDays(364),
						"SellerBankAccount" : Identity.ORGBANKNUM,
						"SellerName" : ((!System.String.IsNullOrEmpty(Identity.ORGNAME))? Identity.ORGNAME : AgentName),
						"SellerServiceProviderId" : "",
						"SellerServiceProviderType" : "",
						"BuyerFullName": BuyerFirstName + " " + BuyerLastName,
						"BuyerPhoneNumber": BuyerPhoneNumber,
						"BuyerEmail": BuyerEmail,
						"BuyerAddress": BuyerAddress,
						"BuyerCity" : BuyerCity,
						"CallBackUrl" : CallBackUrl,
						"WebPageUrl" : WebPageUrl,
						"SupportedPaymentMethods": ""						
					});
					
					Nonce := Base64Encode(RandomBytes(32));

					LocalName := "ed448";
					Namespace := "urn:ieee:iot:e2e:1.0";

					S1 := ValidatedUser.username + ":" + Waher.IoTGateway.Gateway.Domain + ":" + LocalName + ":" + Namespace + ":" + KeyId;
					KeySignature := Base64Encode(Sha2_256HMac(Utf8Encode(S1),Utf8Encode(KeyPassword)));
					
					S2 := S1 + ":" + KeySignature + ":" + Nonce + ":" + ValidatedUser.legalId + ":" + Contract.ContractId + ":" + "Creator";
                    RequestSignature := Base64Encode(Sha2_256HMac(Utf8Encode(S2),Utf8Encode(Password)));
                    
					POST("https://" + Waher.IoTGateway.Gateway.Domain + "/Agent/Legal/SignContract",
                             {
								"keyId": KeyId,
								"legalId": ValidatedUser.legalId,
								"contractId": Contract.ContractId,
								"role": "Creator",
								"nonce": Nonce,
								"keySignature": KeySignature,
								"requestSignature": RequestSignature
                             },
							{
								"Accept" : "application/json",
								"Authorization": "Bearer " + ValidatedUser.jwt
                            });
							
					StateMachineInitialized:= false;
					Counter:= 0;
					TokenId := "";
					while StateMachineInitialized == false and Counter < 10 do 
					(
					 Token:= select top 1 * from IoTBroker.NeuroFeatures.Token where OwnershipContract= Contract.ContractId;
					 if(Token != null) then 
					 (
						StateMachineInitialized:= Token.HasStateMachine;    
						TokenId := Token.TokenId;
					 );
					 Counter += 1;
					 Sleep(1000);
					);

                    Log.Informational("Succeffully cerated item.", logObject, logActor, logEventID, null);
					
					{
						"ContractId" : Contract.ContractId,
						"TokenId" : TokenId,
						"EscrowFee": EscrowFee,
						"BuyerEmail": BuyerEmail,
						"BuyerPhoneNumber": BuyerPhoneNumber,
						"Currency": Currency
					}
					
				)
				catch
				(
				    Log.Error(Exception.Message, null);
					if(errors.Count > 0) then 
					(
						Error(errors);
					)
					else 
					(
						Error(Exception.Message);
					);
					
				)
				finally
				(
					Destroy(logEventID);
					Destroy(logObject);
					Destroy(dateTemplate);
					Destroy(PaymentDeadline);
					Destroy(ParsedDeadlineDate);
					Destroy(KeyId);
					Destroy(KeyPassword);
					Destroy(ContractParameters);
					Destroy(EscrowFee);
					Destroy(Identity);
					Destroy(AgentName);
					Destroy(Nonce);
					Destroy(LocalName);
					Destroy(Namespace);
					Destroy(S1);
					Destroy(KeySignature);
					Destroy(ContractId);
					Destroy(Role);
					Destroy(S2);
					Destroy(RequestSignature);					
				);		    
			);		
            ]]>
	</StartupScript>
</ServiceConfiguration>