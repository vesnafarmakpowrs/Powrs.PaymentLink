<?xml version="1.0" encoding="utf-8"?>
<ServiceConfiguration xmlns="http://waher.se/Schema/ServiceConfiguration.xsd">
	<StartupScript>
		<![CDATA[
			Global.["GetAgentSuccessfullTransactions"]:= (GetAgentSuccessfullTransactions(PUserName, PFrom, PTo, PIncludeIps, PCardBrands):= 
			(
				try
(
    ParsedFromDate:= System.DateTime.ParseExact(PFrom, "MM/dd/yyyy", System.Globalization.CultureInfo.CurrentUICulture);
    ParsedToDate:= System.DateTime.ParseExact(PTo, "MM/dd/yyyy", System.Globalization.CultureInfo.CurrentUICulture);  

    if(ParsedFromDate >= ParsedToDate) then
    (
        Error("From date must be before to date");
    );

    includeCards:= false;
    if(exists(PCardBrands) and !System.String.IsNullOrWhiteSpace(PCardBrands)) then 
    (
        cardBrandsList:=Split(PCardBrands, ",");
        includeCards:= cardBrandsList.Length > 0;
    );

    if(includeCards == false and PIncludeIps == false) then 
    (
        Error("No payment methods selected");
    );

  creatorJid:= PUserName + "@" + Gateway.Domain;
  if(includeCards and PIncludeIps) then 
  (
    array:= [POWRS.Networking.PaySpot.Consants.PaymentType.PaymentCard.ToString(), POWRS.Networking.PaySpot.Consants.PaymentType.IPSPayment.ToString()];
  )
  else if(includeCards) then 
  (
    array:= [POWRS.Networking.PaySpot.Consants.PaymentType.PaymentCard.ToString()];
  )
  else 
  (
    array:= [POWRS.Networking.PaySpot.Consants.PaymentType.IPSPayment.ToString()];
  );

 filteredData:= select pp.TokenId, pp.Amount, pp.PaymentType, pp.CardBrand, pp.DateCompleted, s.VariableValues 
            from POWRS.Networking.PaySpot.Data.PayspotPayment pp 
            join NeuroFeatureTokens t on t.TokenId = pp.TokenId
            join StateMachineCurrentStates s on s.StateMachineId == pp.TokenId
            where pp.DateCompleted >= ParsedFromDate and
            pp.DateCompleted <= ParsedToDate and
	        pp.Result like "00" and
            t.CreatorJid == creatorJid and
            (pp.PaymentType in (array) or 
            (includeCards and pp.CardBrand in (cardBrandsList)))
            order by pp.DateCompleted desc;

  resultList := Create(System.Collections.Generic.List, System.Object);
  foreach payment in filteredData do
    (
        variables:=  payment[5];
        if(variables != null and variables.Length > 0) then
        (
            referenceNumber:= select top 1 Value from variables where Name = "RemoteId";
            currency:= select top 1 Value from variables where Name = "Currency";
            
            resultList.Add({
                "TokenId": payment[0],
                "Amount": payment[1],
                "PaymentType": payment[2],
                "CardBrand": payment[3],
                "RemoteId": referenceNumber,
                "Currency": currency,
                "DateCompleted": payment[4]
            });
        );
    );

    resultList;
  
)
catch
(
	Log.Error(Exception.Message, null);
	BadRequest(Exception.Message);
);
			););
            ]]>
	</StartupScript>
</ServiceConfiguration>