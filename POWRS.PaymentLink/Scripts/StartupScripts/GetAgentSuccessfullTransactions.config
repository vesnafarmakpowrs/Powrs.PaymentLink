<?xml version="1.0" encoding="utf-8"?>
<ServiceConfiguration xmlns="http://waher.se/Schema/ServiceConfiguration.xsd">
	<StartupScript>
		<![CDATA[
				Global.["GetAgentSuccessfullTransactions"]:= (GetAgentSuccessfullTransactions(PUserName, PFrom, PTo, PPaymentType, PCardBrands, PFilterType):= 
				(
					try
					(
						PFrom+= " 00:00:00";
						PTo+= " 23:59:59";
						dateFormat:= "dd/MM/yyyy HH:mm:ss";
						ParsedFromDate:= System.DateTime.ParseExact(PFrom, dateFormat, System.Globalization.CultureInfo.CurrentUICulture);
						ParsedToDate:= System.DateTime.ParseExact(PTo, dateFormat, System.Globalization.CultureInfo.CurrentUICulture);

						if(ParsedFromDate >= ParsedToDate) then
						(
							Error("From date must be before to date");
						);
						Creators:= Global.GetUserHierarchy(PUserName);
					
						filteredData := null;
						if(PFilterType == "Report") then
						(
							if (!exists(PPaymentType) or System.String.IsNullOrWhiteSpace(PPaymentType)) then
							(
								PPaymentType := "IPS,CARDS";
							);
						 
							includeIps := false;
							includeAllCards := false;
							PaymentTypeList := Split(PPaymentType, ",");
							foreach (type in PaymentTypeList) do
							(
								if (type.Trim().ToLower() == "ips") then includeIps := true;
								if (type.Trim().ToLower() == "cards") then includeAllCards := true;
							);
						
							ipsType:= POWRS.Networking.PaySpot.Consants.PaymentType.IPSPayment.ToString();
							cardType:= POWRS.Networking.PaySpot.Consants.PaymentType.PaymentCard.ToString();
						
							if(exists(PCardBrands) and !System.String.IsNullOrWhiteSpace(PCardBrands)) then 
							(
								cardBrandsList := Split(PCardBrands, ",");
								includeAllCards := false;
							) 
							else 
							(
								cardBrandsList := "";
							);
							
							filteredData :=	
								select pp.TokenId, pp.Amount, pp.PaymentType, pp.CardBrand, pp.DateCompleted, s.VariableValues, pp.ExpectedPayoutDate, pp.PayoutDate, pp.SenderFee, pp.RefundedAmount
								from POWRS.Networking.PaySpot.Data.PayspotPayment pp 
									join NeuroFeatureTokens t on t.TokenId = pp.TokenId
									join StateMachineCurrentStates s on s.StateMachineId == pp.TokenId
								where pp.DateCompleted >= ParsedFromDate and
									pp.DateCompleted <= ParsedToDate and
									pp.Result like "00" and
									t.CreatorJid IN Creators and
									(
									  (includeIps && pp.PaymentType = ipsType) 
										or
									  (includeAllCards && pp.PaymentType = cardType)
										or
									  (pp.CardBrand in (cardBrandsList) and pp.PaymentType = cardType)
									)
									order by pp.DateCompleted desc;
						)
						else if(PFilterType == "Payout") then
						(
							filteredData :=	
								select pp.TokenId, pp.Amount, pp.PaymentType, pp.CardBrand, pp.DateCompleted, s.VariableValues, pp.ExpectedPayoutDate, pp.PayoutDate, pp.SenderFee, pp.RefundedAmount
								from POWRS.Networking.PaySpot.Data.PayspotPayment pp 
									join NeuroFeatureTokens t on t.TokenId = pp.TokenId
									join StateMachineCurrentStates s on s.StateMachineId == pp.TokenId
								where pp.PayoutDate >= ParsedFromDate and
									pp.PayoutDate <= ParsedToDate and
									pp.Result like "00" and
									t.CreatorJid IN Creators
								order by pp.PayoutDate desc, pp.DateCompleted desc;
						);

						resultList := Create(System.Collections.Generic.List, System.Object);
						foreach payment in filteredData do
						(
							variables:=  payment[5];
							refundedAmount := payment[9];
							if((refundedAmount == null or refundedAmount == 0) and variables != null and variables.Length > 0) then
							(
								referenceNumber:= select top 1 Value from variables where Name = "RemoteId";
								currency:= select top 1 Value from variables where Name = "Currency";
								amount:= payment[1] == null ? 0 : payment[1];
								fee := payment[8] == null ? 0 : Double(payment[8]);

								resultList.Add({
									"TokenId": payment[0],
									"Amount": amount,
									"PaymentType": payment[2],
									"CardBrand": payment[3],
									"RemoteId": referenceNumber,
									"Currency": currency,
									"DateCompleted": payment[4],
									"ExpectedPayoutDate": payment[6],
									"PayoutDate": payment[7],
									"SenderFee": fee,
									"SellerRecivedAmount" : (payment[7] != null and Year(payment[7]) > 1 ? Dbl(amount)-fee : 0)
								});
							);
						);

						resultList;
					)
					catch
					(
						Log.Error(Exception.Message, PUserName, "", "GetAgentSuccessfullTransactions.config", null);
						BadRequest(Exception.Message);
					);
				););
            ]]>
	</StartupScript>
</ServiceConfiguration>