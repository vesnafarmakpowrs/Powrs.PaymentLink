<?xml version="1.0" encoding="utf-8"?>
<ServiceConfiguration xmlns="http://waher.se/Schema/ServiceConfiguration.xsd">
	<StartupScript>
		<![CDATA[
			Global.["ValidateAgentApiToken"]:= (ValidateAgentApiToken(throwIfIdentityInvalid, throwIfContactNotPopulated):= 
            (
				if(Response != null) then 
				(
					Response.SetHeader("Access-Control-Allow-Origin","*");
				);

				if(Request == null) then 
				(
					HttpError(401, "Unauthorized", "Request not valid.");
				);

				jwtFactory:= null;
				reason:= null;
				
				if(!exists(PJwt:= Request.Header.Authorization.Value)) then 
				(
					HttpError(401, "Unauthorized", "JWT not present.");
				);
				
				PJwt:= Trim(PJwt.Replace("Bearer ", ""));
				Waher.Runtime.Inventory.Types.TryGetModuleParameter("JWT", jwtFactory);
				if(jwtFactory == null) then
				(
					InternalServerError("Unable to initiate jwt validation.");
				);

				Token:=Create(Waher.Security.JWT.JwtToken, PJwt);
				if(!jwtFactory.IsValid(Token, reason)) then
				(
					HttpError(401, "Unauthorized", "Token " + reason);
				);

				array:= Split(Token.Claims.sub, "@");
				if(array.Length != 2) then 
				(
					HttpError(401, "Unauthorized", "Invalid token");
				);

				username:= Trim(array[0]);
				userDomain:= Trim(array[1]);
				gatewayDomain:= Trim(Gateway.Domain);

				if(System.String.IsNullOrWhiteSpace(username) || System.String.IsNullOrWhiteSpace(userDomain)) then
				(
					HttpError(401, "Unauthorized", "Invalid token");
				);

				legalIdentity:= select top 1 Id from LegalIdentities where Account = username and State = "Approved" order by Created desc;
				isUserApproved:= !System.String.IsNullOrWhiteSpace(legalIdentity);

				if(throwIfIdentityInvalid and !isUserApproved) then
				(			        
					Forbidden("User is not approved");
				);

				contactFilled:= false;
				orgName := "";
				goToOnBoarding := false;
				isSubUser := false;
				
				try
				(
					brokerAccRole := Select top 1 * from POWRS.PaymentLink.Models.BrokerAccountRole where UserName = username;
					if(brokerAccRole != null) then (
						orgName := brokerAccRole.OrgName;
						isSubUser := brokerAccRole.UserName != brokerAccRole.CreatorUserName;
						OrganizationContactInfo:= select top 1 * from POWRS.PaymentLink.Models.OrganizationContactInformation where OrganizationName = brokerAccRole.OrgName;
						contactFilled:= OrganizationContactInfo != null and OrganizationContactInfo.IsValid()
					);
					
					goToOnBoarding := !isUserApproved and !isSubUser;
				
				if(throwIfContactNotPopulated and !contactFilled) then 
				(
					Forbidden("Contact informations are not existent or not properly populated");
				);
   
				role := POWRS.PaymentLink.Models.AccountRole.User;
				objBrokerAccountRole := 
					select top 1 * 
					from POWRS.PaymentLink.Models.BrokerAccountRole 
					where UserName = username;

				if (objBrokerAccountRole != null) then(
					role := objBrokerAccountRole.Role;
				);

				res:= {
					authenticated: true,
					legalId: legalIdentity,
					isApproved: isUserApproved,
					goToOnBoarding: goToOnBoarding,
					orgName: Str(orgName),
					contactInformationsPopulated: contactFilled,
					username: Str(username),
					role: role.ToString(),
					jwt: Str(PJwt)
				};
				)
				finally
				(
				 error:= "";
				);				
           ););
        ]]>
	</StartupScript>
</ServiceConfiguration>
